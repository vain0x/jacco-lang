void assert(int cond_1);

/* never */ void abort();

int signum_1(struct Signum value);

int main();

struct Positive {
};

struct Zero {
};

struct Negative {
};

struct Signum {
    unsigned long long tag_;

    union {
        struct Positive Positive;
        struct Zero Zero;
        struct Negative Negative;
    };
};

int signum_1(struct Signum value_1) {
    int match_result_1;
    switch (value_1) {
        case 0ULL: {
            match_result_1 = 1;
            goto match_next_1;
        }
        case 1ULL: {
            match_result_1 = 0;
            goto match_next_1;
        }
        case 2ULL: {
            int minus_1 = -1;
            match_result_1 = minus_1;
            goto match_next_1;
        }
        default: {
            // call_result_1 is killed.
            abort();
            match_result_1 = (void)0;
            goto match_next_1;
        }
    }

match_next_1:;
    return match_result_1;
}

int main() {
    struct Signum Zero_1;
    Zero_1.tag_ = 1ULL;
    int call_result_2 = signum_1(Zero_1);
    int equal_1 = call_result_2 == 0;
    // call_result_3 is killed.
    assert(equal_1);
    return 0;
}
