// ジャッコ言語の構文的操作を扱うライブラリ

// -----------------------------------------------
// プロセス管理
// -----------------------------------------------

extern fn abort() -> !;

fn panic(s: *c8) -> ! {
    eprint_s("[ERROR] ");
    eprint_s(s);
    eprint_s("\n");
    abort()
}

// -----------------------------------------------
// 入出力
// -----------------------------------------------

extern fn eprint_s(value: *c8);
extern fn eprint_d(value: i32);

fn eprint_sds(s1: *c8, d2: i32, s3: *c8) {
    eprint_s(s1);
    eprint_d(d2);
    eprint_s(s3);
}

// -----------------------------------------------
// テストフレームワーク
// -----------------------------------------------

struct TestTools {
    pass_count: usize,
    fail_count: usize,
}

fn test_tools_new() -> TestTools {
    TestTools {
        pass_count: 0_usize,
        fail_count: 0_usize,
    }
}

fn test_tools_finish(tt: TestTools) -> i32 {
    let total_count = tt.pass_count + tt.fail_count;

    eprint_sds("[TRACE] 表明数 ", total_count as i32, " / ");
    eprint_sds("成功 ", tt.pass_count as i32, " / ");
    eprint_sds("失敗 ", tt.fail_count as i32, "\n");

    if tt.fail_count > 0_usize {
        // 文字色: イエロー
        eprint_s("[\x1B[33mERROR\x1B[0m] 一部のテストが失敗しています。\n");
        1
    } else if tt.pass_count == 0_usize {
        // 文字色: イエロー
        eprint_s("[\x1B[33mERROR\x1B[0m] 表明がありません。\n");
        1
    } else {
        // 文字色: シアン
        eprint_s("[\x1B[36mINFO]\x1B[0m OK\n");
        0
    }
}

/// 表明が通ったときに呼ばれる。
fn assert_pass(tt: *mut TestTools) {
    (*tt).pass_count += 1_usize;
}

/// 表明が落ちたときに呼ばれる。
fn assert_fail(tt: *mut TestTools) {
    (*tt).fail_count += 1_usize;

    let total_count = (*tt).pass_count + (*tt).fail_count;

    // 文字色: イエロー
    eprint_sds("[\x1B[33mERROR\x1B[0m] 表明エラー #", total_count as i32, "\n");
}

fn assert_that(tt: *mut TestTools, cond: bool, message: *c8) {
    if cond {
        tt |> assert_pass();
    } else {
        tt |> assert_fail();
        eprint_s("    ");
        eprint_s(message);
        eprint_s("\n");
    }
}

fn assert_eq_i32(tt: *mut TestTools, actual: i32, expected: i32) {
    if actual == expected {
        tt |> assert_pass();
    } else {
        tt |> assert_fail();
        // 文字色: シアン
        eprint_sds("    期待された結果 \x1B[36m", expected, "\x1B[0m\n");
        // 文字色: イエロー
        eprint_sds("    実際に得た結果 \x1B[33m", actual, "\x1B[0m\n");
    }
}

fn assert_eq_usize(tt: *mut TestTools, actual: usize, expected: usize) {
    assert_eq_i32(tt, actual as i32, expected as i32);
}

// -----------------------------------------------
// 数値ライブラリ
// -----------------------------------------------

fn i32_compare(left: i32, right: i32) -> i32 {
    if left == right {
        0
    } else if left < right {
        -1
    } else {
        1
    }
}

fn usize_min(left: usize, right: usize) -> usize {
    if left < right {
        left
    } else {
        right
    }
}

// -----------------------------------------------
// 文字列ライブラリ
// -----------------------------------------------

extern fn strlen(str: *c8) -> usize;

/// 文字列の一部への読み取り専用の参照。
///
/// Rust の `&str`、C++ の `std::string_view` に相当。
struct Str {
    ptr: *c8,
    len: usize,
}

fn str_empty() -> Str {
    Str {
        ptr: "",
        len: 0_usize,
    }
}

fn str_from_raw(c_str: *c8) -> Str {
    Str {
        ptr: c_str,
        len: strlen(c_str),
    }
}

fn str_is_empty(s: Str) -> bool {
    s.len == 0_usize
}

fn str_slice_from(s: Str, start: usize) -> Str {
    if start >= s.len {
        return str_empty();
    }

    Str {
        ptr: s.ptr + start,
        len: s.len - start,
    }
}

fn str_compare(s: Str, other: Str) -> i32 {
    let n = (s.len |> usize_min(other.len)) + 1_usize;
    let p = s.ptr;
    let q = other.ptr;
    while n >= 1_usize {
        n -= 1_usize;

        if *p != *q {
            // FIXME: *p as i32 が *(p as i32) にパースされてしまう。
            return i32_compare((*p) as i32, (*q) as i32);
        }

        p += 1_usize;
        q += 1_usize;
    }
    0
}

fn str_tests(tt: *mut TestTools) {
    let hello = str_from_raw("hello");
    assert_eq_usize(tt, hello.len, 5_usize);

    assert_that(tt, str_empty() |> str_is_empty(), "\"\" is empty");
    assert_that(tt, !(hello |> str_is_empty()), "\"hello\" is not empty");

    let lo = str_slice_from(hello, 3_usize);
    assert_eq_usize(tt, lo.len, 2_usize);

    assert_eq_i32(tt, str_compare(str_from_raw("a"), str_from_raw("aa")), -1);
    assert_eq_i32(tt, str_compare(str_from_raw("aa"), str_from_raw("ab")), -1);
    assert_eq_i32(tt, str_compare(str_from_raw("ba"), str_from_raw("a")), 1);
    assert_eq_i32(tt, str_compare(lo, str_from_raw("lo")), 0);
}

// -----------------------------------------------
// 構文
// -----------------------------------------------

/// 構文木のノードやトークンの種類
enum SyntaxKind {
    /// End of file. 入力の末尾
    Eof,
    /// 1つ以上の改行
    NewLines,
    /// 1つ以上の、改行でない空白文字
    Blank,
}

// -----------------------------------------------
// 字句解析
// -----------------------------------------------

fn c8_is_new_line(c: c8) -> bool {
    match c {
        '\r' => true,
        '\n' => true,
        _ => false,
    }
}

fn c8_is_blank(c: c8) -> bool {
    match c {
        ' ' => true,
        '\t' => true,
        _ => false,
    }
}

struct TokenStream {
    text: Str,
    last: usize,
    current: usize,
}

fn token_stream_new(text: Str) -> TokenStream {
    TokenStream {
        text: text,
        last: 0_usize,
        current: 0_usize,
    }
}

fn token_stream_from_raw(text: *c8) -> TokenStream {
    token_stream_new(str_from_raw(text))
}

fn ts_peek(ts: *TokenStream) -> c8 {
    if (*ts).current == (*ts).text.len {
        return '\0';
    }

    (*ts).text.ptr[(*ts).current]
}

fn ts_bump(ts: *mut TokenStream)
    // requires ts.current <= ts.text.len
{
    // FIXME: Unicode 文字を途中で切らない
    (*ts).text.ptr += 1_usize;
    (*ts).text.len -= 1_usize;
}

fn tokenize_new_lines_with_cr(ts: *mut TokenStream) -> SyntaxKind {
    ts |> ts_bump();
    tokenize_new_lines(ts)
}

fn tokenize_new_lines(ts: *mut TokenStream) -> SyntaxKind {
    while ts |> ts_peek() |> c8_is_new_line() {
        ts |> ts_bump();
    }

    SyntaxKind::NewLines
}

fn tokenize_blank(ts: *mut TokenStream) -> SyntaxKind {
    while ts |> ts_peek() |> c8_is_blank() {
        ts |> ts_bump();
    }

    SyntaxKind::Blank
}

fn token_stream_next(ts: *mut TokenStream) -> SyntaxKind {
    match ts |> ts_peek() {
        '\0' => SyntaxKind::Eof,

        '\r' => tokenize_new_lines_with_cr(ts),
        '\n' => tokenize_new_lines(ts),

        // FIXME: OR パターンは未実装
        ' ' => tokenize_blank(ts),
        '\t' => tokenize_blank(ts),

        c => {
            eprint_sds("unknown char ", c as i32, "\n");
            // FIXME: abort の結果を返すと void 型の変数が生成されてしまう
            abort();
            SyntaxKind::Eof
        }
    }
}

fn tokenize_tests(tt: *mut TestTools) {
    let ts = token_stream_from_raw(" \t");
    assert_that(tt, (&mut ts |> token_stream_next()) == SyntaxKind::Blank, "expect blank");
    assert_that(tt, (&mut ts |> token_stream_next()) == SyntaxKind::Eof, "expect eof");
    assert_that(tt, (&mut ts |> token_stream_next()) == SyntaxKind::Eof, "expect eof");

    let ts = token_stream_from_raw("  \r\n\r\n  \n");
    assert_that(tt, (&mut ts |> token_stream_next()) == SyntaxKind::Blank, "expect blank");
    assert_that(tt, (&mut ts |> token_stream_next()) == SyntaxKind::NewLines, "expect new lines");
    assert_that(tt, (&mut ts |> token_stream_next()) == SyntaxKind::Blank, "expect blank");
    assert_that(tt, (&mut ts |> token_stream_next()) == SyntaxKind::NewLines, "expect new lines");
    assert_that(tt, (&mut ts |> token_stream_next()) == SyntaxKind::Eof, "expect eof");
}

// -----------------------------------------------
// エントリポイント
// -----------------------------------------------

/// テストを実行して、結果コードを返す。
pub fn libjacco_syntax_tests() -> i32 {
    let tt = test_tools_new();
    eprint_s("[TRACE] テストの実行を開始します。\n")

    // FIXME: ブロック文が使えないので if true で代用。
    if true {
        let tt = &mut tt;
        assert_eq_i32(tt, 40 + 2, 42);
        // assert_eq_i32(tt, 40 - 2, 42);

        str_tests(tt);
        tokenize_tests(tt);
    }

    eprint_s("[TRACE] テストの実行が終了しました。\n");
    test_tools_finish(tt)
}
